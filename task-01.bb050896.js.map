{"version":3,"sources":["js/task-01.js"],"names":["refs","daysEl","document","querySelector","hoursEl","minsEl","secsEl","CountdownTimer","constructor","selector","targetDate","onTick","time","getTime","Date","now","intervalId","tick","secs","stop","mins","hours","days","start","Math","floor","setInterval","clearInterval","newTimer","updateTimer","timer","textContent","pad","value","String","padStart"],"mappings":";;;AAwEA,aAxEA,QAAA,qBACA,MAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,uBAC/BC,QAASF,SAASC,cAAc,wBAChCE,OAAQH,SAASC,cAAc,uBAC/BG,OAAQJ,SAASC,cAAc,wBAGjC,MAAMI,EACJC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,OAAwBC,IAC7BF,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,OAASA,EACTC,KAAAA,KAAOF,EAAWG,UAAYC,KAAKC,MACnCC,KAAAA,WAAa,KAGpBC,OACM,KAAKC,MAAQ,EACVC,KAAAA,OAEAD,KAAAA,MAAQ,EAEG,IAAd,KAAKA,MAAc,KAAKE,KAAO,IAC5BF,KAAAA,KAAO,GACPE,KAAAA,MAAQ,GAEG,IAAd,KAAKA,MAAc,KAAKC,MAAQ,IAC7BD,KAAAA,KAAO,GACPC,KAAAA,OAAS,GAEG,IAAf,KAAKA,OAAe,KAAKC,KAAO,IAC7BD,KAAAA,MAAQ,GACRC,KAAAA,MAAQ,GAIjBC,QACOD,KAAAA,KAAOE,KAAKC,MAAM,KAAKb,KAAQ,OAC/BS,KAAAA,MAAQG,KAAKC,MAAO,KAAKb,KAAQ,MAAyB,MAC1DQ,KAAAA,KAAOI,KAAKC,MAAO,KAAKb,KAAQ,KAAoB,KACpDM,KAAAA,KAAOM,KAAKC,MAAO,KAAKb,KAAQ,IAAc,KAE9CI,KAAAA,WAAaU,YAAY,KACvBT,KAAAA,OACAN,KAAAA,OAAO,OACX,KAGLQ,OACEQ,cAAc,KAAKX,aAIvB,MAAMY,EAAW,IAAIrB,EAAe,CAClCE,SAAU,WACVC,WAAY,IAAII,KAAK,mBACrBH,OAAQkB,IAGV,SAASA,EAAYC,GACb,MAAA,KAAER,EAAF,MAAQD,EAAR,KAAeD,EAAf,KAAqBF,GAASY,EACpC9B,EAAKC,OAAO8B,YAAcT,EAC1BtB,EAAKI,QAAQ2B,YAAcC,EAAIX,GAC/BrB,EAAKK,OAAO0B,YAAcC,EAAIZ,GAC9BpB,EAAKM,OAAOyB,YAAcC,EAAId,GAGhC,SAASc,EAAIC,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCP,EAASL","file":"task-01.bb050896.js","sourceRoot":"../src","sourcesContent":["import '../css/common.css';\nconst refs = {\n  daysEl: document.querySelector('[data-value=\"days\"]'),\n  hoursEl: document.querySelector('[data-value=\"hours\"]'),\n  minsEl: document.querySelector('[data-value=\"mins\"]'),\n  secsEl: document.querySelector('[data-value=\"secs\"]'),\n};\n\nclass CountdownTimer {\n  constructor({ selector, targetDate, onTick }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.onTick = onTick;\n    this.time = targetDate.getTime() - Date.now();\n    this.intervalId = null;\n  }\n\n  tick() {\n    if (this.secs <= 0) {\n      this.stop();\n    } else {\n      this.secs -= 1;\n    }\n    if (this.secs === 0 && this.mins > 0) {\n      this.secs = 59;\n      this.mins -= 1;\n    }\n    if (this.mins === 0 && this.hours > 0) {\n      this.mins = 59;\n      this.hours -= 1;\n    }\n    if (this.hours === 0 && this.days > 0) {\n      this.hours = 23;\n      this.days -= 1;\n    }\n  }\n\n  start() {\n    this.days = Math.floor(this.time / (1000 * 60 * 60 * 24));\n    this.hours = Math.floor((this.time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    this.mins = Math.floor((this.time % (1000 * 60 * 60)) / (1000 * 60));\n    this.secs = Math.floor((this.time % (1000 * 60)) / 1000);\n\n    this.intervalId = setInterval(() => {\n      this.tick();\n      this.onTick(this);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(this.intervalId);\n  }\n}\n\nconst newTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('August 26, 2021'),\n  onTick: updateTimer,\n});\n\nfunction updateTimer(timer) {\n  const { days, hours, mins, secs } = timer;\n  refs.daysEl.textContent = days;\n  refs.hoursEl.textContent = pad(hours);\n  refs.minsEl.textContent = pad(mins);\n  refs.secsEl.textContent = pad(secs);\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nnewTimer.start();\n"]}